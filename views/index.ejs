<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>annie&victoria</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* 预加载字体 */
        @font-face {
            font-family: 'Inter';
            font-style: normal;
            font-weight: 400;
            font-display: swap;
            src: url('https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiA.woff2') format('woff2');
        }
        
        /* 兔子图片固定大小 */
        .bunny-image {
            width: 90px;
            height: 90px;
            object-fit: cover;
        }
        
        /* 兔子定位 */
        .bunny {
            position: fixed;
            right: 2rem;
            bottom: 2rem;
            z-index: 50;
        }
        
        /* 页脚云朵样式 */
        .page-footer {
            position: relative;
            height: 150px;
            margin-top: 50px;
        }
        
        .footer-cloud {
            position: absolute;
            left: 20px;
            bottom: 0;
            width: 200px;
            height: auto;
            opacity: 0.8;
        }

        /* 加载动画 */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #6366f1;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* 设置弹窗 */
        .setup-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }

        .setup-modal.active {
            display: flex;
        }

        /* 提示消息 */
        .toast {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: white;
            padding: 12px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: none;
            z-index: 9999;
        }

        .toast.show {
            display: block;
            animation: slideUp 0.3s ease;
        }

        .toast.success {
            border-left: 4px solid #10b981;
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        @keyframes slideUp {
            from {
                transform: translate(-50%, 100%);
                opacity: 0;
            }
            to {
                transform: translate(-50%, 0);
                opacity: 1;
            }
        }
    </style>
    <script>
        // 配置Tailwind自定义颜色和字体
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#6366f1',
                        secondary: '#8b5cf6',
                        victoria: '#3b82f6',
                        annie: '#10b981'
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif']
                    }
                }
            }
        }
    </script>
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .text-shadow {
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
            }
            .card-hover {
                transition: all 0.3s ease;
            }
            .card-hover:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            }
            .bunny-talk {
                animation: pop 0.3s ease-out;
            }
            @keyframes pop {
                0% { transform: scale(0.8); opacity: 0; }
                100% { transform: scale(1); opacity: 1; }
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 min-h-screen font-sans text-gray-800">
    
    <!-- Toast 提示 -->
    <div id="toast" class="toast">
        <span id="toastMessage"></span>
    </div>

    <!-- 初始化设置弹窗 -->
    <div id="setupModal" class="setup-modal">
        <div class="bg-white rounded-2xl shadow-2xl p-6 max-w-sm w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-gray-800">🔐 配置 JSONBin</h2>
                <button onclick="closeSettings()" class="text-gray-400 hover:text-gray-600 text-2xl transition-colors">
                    <i class="fa fa-times"></i>
                </button>
            </div>
            <p class="text-gray-600 mb-4 text-sm">首次使用需要配置 JSONBin.io</p>
            
            <div class="space-y-4">
                <div>
                    <label class="block text-gray-700 mb-2">API Key (Master Key)</label>
                    <input type="password" id="apiKey" placeholder="$2b$10..." class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary">
                    <p class="text-xs text-gray-500 mt-1">
                        <a href="https://jsonbin.io/app/api-keys" target="_blank" class="text-primary hover:underline">获取 API Key →</a>
                    </p>
                </div>
                <div>
                    <label class="block text-gray-700 mb-2">Bin ID</label>
                    <input type="text" id="binId" placeholder="例如：6580..." class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary">
                    <p class="text-xs text-gray-500 mt-1">如果没有，留空会自动创建</p>
                </div>
                
                <div class="pt-3 space-y-2">
                    <button onclick="saveConfig()" class="w-full bg-primary hover:bg-primary/90 text-white py-3 rounded-lg font-medium transition-colors">
                        保存配置
                    </button>
                    <button onclick="useLocalMode()" class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 py-3 rounded-lg font-medium transition-colors">
                        使用本地模式（数据不同步）
                    </button>
                    <button onclick="forceSync()" class="w-full bg-purple-100 hover:bg-purple-200 text-purple-700 py-3 rounded-lg font-medium transition-colors">
                        强制同步数据
                    </button>
                    <button onclick="syncToCloud()" class="w-full bg-teal-100 hover:bg-teal-200 text-teal-700 py-3 rounded-lg font-medium transition-colors">
                        手动同步到云端
                    </button>
                    <button onclick="exportConfig()" class="w-full bg-green-100 hover:bg-green-200 text-green-700 py-3 rounded-lg font-medium transition-colors">
                        导出配置
                    </button>
                    <button onclick="importConfig()" class="w-full bg-blue-100 hover:bg-blue-200 text-blue-700 py-3 rounded-lg font-medium transition-colors">
                        导入配置
                    </button>
                    <button onclick="clearConfig()" class="w-full bg-red-100 hover:bg-red-200 text-red-700 py-3 rounded-lg font-medium transition-colors">
                        清除配置
                    </button>
                </div>
            </div>
            
            <div class="mt-4 p-3 bg-blue-50 rounded-lg">
                <h3 class="font-bold text-sm mb-2">📝 使用说明：</h3>
                <ol class="text-xs text-gray-600 space-y-1">
                    <li>1. 注册 <a href="https://jsonbin.io" target="_blank" class="text-primary hover:underline">JSONBin.io</a> 账号</li>
                    <li>2. 获取 API Key (Master Key)</li>
                    <li>3. 可选：创建一个 Bin，或留空自动创建</li>
                    <li>4. 保存配置即可开始使用</li>
                </ol>
            </div>
        </div>
    </div>



    <!-- 导航栏 -->
    <nav id="navbar" class="fixed w-full bg-white/90 backdrop-blur-md shadow-sm z-40 transition-all duration-300">
        <div class="container mx-auto px-4 py-3 flex justify-between items-center">
            <div class="flex items-center space-x-2">
                <i class="fa fa-heart text-primary text-2xl animate-pulse"></i>
                <h1 class="text-xl md:text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    annie&victoria
                </h1>
            </div>
            
            <div class="hidden md:block bg-blue-50 px-4 py-1 rounded-full text-sm font-medium">
                <i class="fa fa-calendar-check-o text-primary mr-1"></i>
                认识 <span id="days-count" class="text-primary font-bold">0</span> 天啦
            </div>
            
            <div class="hidden md:flex space-x-6">
                <a href="#memories" class="hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-camera-retro mr-1"></i> 记忆墙
                </a>
                <a href="#diary" class="hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-book mr-1"></i> 日记本
                </a>
                <a href="#todo" class="hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-list mr-1"></i> 待办清单
                </a>
                <a href="#messages" class="hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-envelope mr-1"></i> 悄悄话
                </a>
                <button onclick="showSettings()" class="text-gray-500 hover:text-primary transition-colors" title="设置">
                    <i class="fa fa-cog"></i>
                </button>
            </div>
            
            <button id="menuBtn" class="md:hidden text-gray-700 hover:text-primary transition-colors">
                <i class="fa fa-bars text-xl"></i>
            </button>
        </div>
        
        <div id="mobileMenu" class="md:hidden hidden bg-white border-t">
            <div class="container mx-auto px-4 py-2 flex flex-col space-y-3">
                <div class="py-2 text-center bg-blue-50 rounded-lg">
                    <i class="fa fa-calendar-check-o text-primary mr-1"></i>
                    认识 <span id="days-count-mobile" class="text-primary font-bold">0</span> 天啦
                </div>
                <a href="#memories" class="py-2 hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-camera-retro mr-2 w-6"></i> 记忆墙
                </a>
                <a href="#diary" class="py-2 hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-book mr-2 w-6"></i> 日记本
                </a>
                <a href="#todo" class="py-2 hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-list mr-2 w-6"></i> 待办清单
                </a>
                <a href="#messages" class="py-2 hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-envelope mr-2 w-6"></i> 悄悄话
                </a>
                <button onclick="showSettings()" class="py-2 hover:text-primary transition-colors duration-300 flex items-center">
                    <i class="fa fa-cog mr-2 w-6"></i> 设置
                </button>
            </div>
        </div>
    </nav>



    <!-- 英雄区域 -->
    <header class="pt-24 pb-16 md:pt-32 md:pb-24 px-4 bg-gradient-to-br from-blue-100 via-indigo-50 to-purple-100 relative overflow-hidden">
        <div class="container mx-auto text-center">
            <h1 class="text-4xl md:text-6xl font-bold text-shadow mb-4 bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
            我们的小窝
        </h1>
        
        <!-- 添加跳动的book图片和星星 -->
        <div class="my-6 flex justify-center items-center relative">
            <img src="https://x275wang1.github.io/Annie-Victoria/public/images/星星.png" alt="星星" class="absolute w-[550px] h-[550px] object-contain animate-pulse z-0 opacity-60">
            <img src="https://x275wang1.github.io/Annie-Victoria/public/images/book.png" alt="book" class="book-image relative z-10 w-[432px] h-[432px] md:w-[432px] md:h-[432px] object-contain">
        </div>
        
        <p class="text-xl md:text-2xl text-gray-600 mb-2">
            诶，你竟然发现了这个网站呀！
        </p>
            <p class="text-lg md:text-xl text-gray-600 max-w-2xl mx-auto mb-8">
                记录每一个欢笑的瞬间，珍藏每一段美好的回忆，
                这里是属于 Victoria 和 Annie 的秘密小窝
            </p>
            <div class="flex flex-col sm:flex-row justify-center gap-4">
                <a href="#memories" class="bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white py-3 px-8 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center transform hover:-translate-y-1">
                    <i class="fa fa-image mr-2"></i> 浏览回忆
                </a>
                <a href="#diary" class="bg-white hover:bg-gray-50 text-indigo-600 border-2 border-indigo-200 py-3 px-8 rounded-full shadow-md hover:shadow-lg transition-all duration-300 flex items-center justify-center transform hover:-translate-y-1">
                    <i class="fa fa-pencil mr-2"></i> 写点什么
                </a>
            </div>
        </div>
    </header>

    <main class="container mx-auto px-4 py-12">
        <!-- 记忆墙部分 -->
        <section id="memories" class="mb-20">
            <div class="flex items-center mb-8">
                <div class="w-12 h-1 bg-primary rounded-full mr-4"></div>
                <h2 class="text-2xl md:text-3xl font-bold text-gray-800">我们的记忆墙</h2>
            </div>
            
            <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
                <h3 class="text-xl font-bold mb-4 text-gray-800">添加新照片</h3>
                <form id="memoryForm" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="lg:col-span-4">
                        <label class="block text-gray-700 mb-2" for="photoFile">选择照片</label>
                        <input type="file" id="photoFile" accept="image/*" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" required>
                        <p class="text-xs text-gray-500 mt-1">图片会被压缩以节省空间</p>
                    </div>
                    <div>
                        <label class="block text-gray-700 mb-2" for="photoTitle">照片标题</label>
                        <input type="text" id="photoTitle" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" placeholder="例如：一起看电影" required>
                    </div>
                    <div>
                        <label class="block text-gray-700 mb-2" for="photoDate">日期</label>
                        <input type="date" id="photoDate" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" required>
                    </div>
                    <div>
                        <label class="block text-gray-700 mb-2" for="photoUploader">上传人</label>
                        <select id="photoUploader" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" required>
                            <option value="Victoria">Victoria</option>
                            <option value="Annie">Annie</option>
                        </select>
                    </div>
                    <div class="lg:col-span-4">
                        <label class="block text-gray-700 mb-2" for="photoDescription">描述</label>
                        <textarea id="photoDescription" rows="2" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" placeholder="写下关于这张照片的回忆..."></textarea>
                    </div>
                    <div class="lg:col-span-4">
                        <button type="submit" class="bg-primary hover:bg-primary/90 text-white py-3 px-6 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                            <i class="fa fa-save mr-2"></i> 保存照片
                        </button>
                    </div>
                </form>
            </div>
            
            <div id="memoriesGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8"></div>
        </section>
        
        <!-- 日记本部分 -->
        <section id="diary" class="mb-20">
            <div class="flex items-center mb-8">
                <div class="w-12 h-1 bg-secondary rounded-full mr-4"></div>
                <h2 class="text-2xl md:text-3xl font-bold text-gray-800">我们的日记本</h2>
                <img src="https://x275wang1.github.io/Annie-Victoria/public/images/看书.png" alt="看书" class="ml-4 w-24 h-24 object-contain animate-bounce hover:animate-spin transition-all duration-500 hover:scale-110">
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div id="diariesList" class="lg:col-span-2 space-y-6"></div>
                
                <div class="bg-white rounded-xl shadow-md p-6">
                    <h3 class="text-xl font-bold mb-4 text-gray-800">写点什么吧</h3>
                    <form id="diaryForm" class="space-y-4">
                        <div>
                            <label class="block text-gray-700 mb-2" for="diaryTitle">标题</label>
                            <input type="text" id="diaryTitle" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" placeholder="给这篇日记起个标题" required>
                        </div>
                        <div>
                            <label class="block text-gray-700 mb-2" for="diaryAuthor">作者</label>
                            <select id="diaryAuthor" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" required>
                                <option value="Victoria">Victoria</option>
                                <option value="Annie">Annie</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-700 mb-2" for="diaryCategory">分类</label>
                            <select id="diaryCategory" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary">
                                <option value="日常">日常</option>
                                <option value="心情">心情</option>
                                <option value="分享">分享</option>
                                <option value="计划">计划</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-700 mb-2" for="diaryContent">内容</label>
                            <textarea id="diaryContent" rows="5" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" placeholder="把想对她说的话写在这里..." required></textarea>
                        </div>
                        <button type="submit" class="w-full bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white py-3 rounded-full shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
                            <i class="fa fa-pencil mr-2"></i> 发布日记
                        </button>
                    </form>
                </div>
            </div>
        </section>
        
        <!-- 待办清单部分 -->
        <section id="todo" class="mb-20">
            <div class="flex items-center mb-8">
                <div class="w-12 h-1 bg-primary rounded-full mr-4"></div>
                <h2 class="text-2xl md:text-3xl font-bold text-gray-800">我们的待办清单</h2>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">
                <div class="lg:col-span-3 bg-white rounded-2xl shadow-md p-6">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-bold text-gray-800">一起要做的事情</h3>
                        <div class="flex space-x-2">
                            <button id="showAllTodos" class="bg-blue-100 text-primary text-sm px-3 py-1 rounded-full">全部</button>
                            <button id="showActiveTodos" class="bg-gray-100 text-gray-600 text-sm px-3 py-1 rounded-full">未完成</button>
                            <button id="showCompletedTodos" class="bg-gray-100 text-gray-600 text-sm px-3 py-1 rounded-full">已完成</button>
                        </div>
                    </div>
                    
                    <div id="todosList" class="space-y-4"></div>
                </div>
                
                <div class="lg:col-span-2 bg-white rounded-2xl shadow-md p-6">
                    <h3 class="text-xl font-bold mb-4 text-gray-800">添加新计划</h3>
                    <form id="todoForm" class="space-y-4">
                        <div>
                            <label class="block text-gray-700 mb-2" for="todoItem">计划内容</label>
                            <input type="text" id="todoItem" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" placeholder="例如：一起去游乐园" required>
                        </div>
                        <div>
                            <label class="block text-gray-700 mb-2" for="todoCreator">创建人</label>
                            <select id="todoCreator" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" required>
                                <option value="Victoria">Victoria</option>
                                <option value="Annie">Annie</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-gray-700 mb-2" for="todoDate">计划时间</label>
                            <input type="date" id="todoDate" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" required>
                        </div>
                        <div>
                            <label class="block text-gray-700 mb-2" for="todoNotes">备注</label>
                            <textarea id="todoNotes" rows="3" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary" placeholder="写下关于这个计划的想法..."></textarea>
                        </div>
                        <button type="submit" class="w-full bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white py-3 rounded-full shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
                            <i class="fa fa-plus mr-2"></i> 添加到清单
                        </button>
                    </form>
                </div>
            </div>
        </section>
        
        <!-- 悄悄话部分 -->
        <section id="messages" class="mb-12">
            <div class="flex items-center mb-8">
                <div class="w-12 h-1 bg-secondary rounded-full mr-4"></div>
                <h2 class="text-2xl md:text-3xl font-bold text-gray-800">我们的悄悄话</h2>
            </div>
            
            <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
                <div id="messagesContainer" class="h-96 p-6 overflow-y-auto space-y-6"></div>
                
                <div class="border-t p-4">
                    <form id="messageForm" class="flex">
                        <select id="messageSender" class="w-24 p-3 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent">
                            <option value="Victoria">Victoria</option>
                            <option value="Annie">Annie</option>
                        </select>
                        <input type="text" id="messageInput" class="flex-grow p-3 border-t border-b border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="输入想对她说的话..." required>
                        <button type="submit" class="bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white px-6 rounded-r-lg shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
                            <i class="fa fa-paper-plane"></i>
                        </button>
                    </form>
                </div>
            </div>
        </section>
    </main>

    <!-- 页脚 -->
    <footer class="bg-white py-8 border-t">
        <div class="container mx-auto px-4 text-center">
            <div class="flex justify-center items-center mb-4">
                <i class="fa fa-heart text-primary text-2xl mr-2 animate-pulse"></i>
                <h2 class="text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">annie&victoria</h2>
            </div>
            <p class="text-gray-500 mb-6">记录每一个珍贵瞬间，创造更多美好回忆</p>
            <p class="text-gray-400 text-sm">© 2024 Victoria & Annie 的小窝</p>
        </div>
    </footer>

    <!-- 页面底部素材 -->
    <div class="page-footer">
        <img src="https://x275wang1.github.io/Annie-Victoria/public/images/cloud.png" alt="可爱云朵和星星" class="footer-cloud" />
        <!-- 会说话的兔子 -->
        <div id="bunny" class="bunny">
            <div class="relative">
                <img src="https://x275wang1.github.io/Annie-Victoria/public/images/penny.png" alt="可爱的小兔子" class="bunny-image rounded-full border-4 border-blue-200">
                <div id="bunny-speech" class="hidden absolute -top-24 -left-48 bg-white rounded-2xl p-3 shadow-lg border-2 border-blue-200 bunny-talk max-w-[180px]">
                    <p id="bunny-text" class="text-sm">你们好呀！😊</p>
                    <div class="absolute -bottom-3 left-10 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-white"></div>
                    <div class="absolute -bottom-5 left-10 w-0 h-0 border-l-10 border-r-10 border-t-10 border-l-transparent border-r-transparent border-t-blue-200"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // JSONBin.io 配置管理
        class JSONBinStorage {
            constructor() {
                this.loadConfig();
            }

            loadConfig() {
                const saved = localStorage.getItem('jsonbin_config');
                if (saved) {
                    const config = JSON.parse(saved);
                    this.apiKey = config.apiKey;
                    this.binId = config.binId;
                    this.isLocal = config.isLocal || false;
                } else {
                    this.isLocal = true; // 默认使用本地模式
                }
            }

            saveConfig(apiKey, binId) {
                const config = { apiKey, binId, isLocal: false };
                localStorage.setItem('jsonbin_config', JSON.stringify(config));
                this.apiKey = apiKey;
                this.binId = binId;
                this.isLocal = false;
            }

            setLocalMode() {
                const config = { isLocal: true };
                localStorage.setItem('jsonbin_config', JSON.stringify(config));
                this.isLocal = true;
            }

            async createBin(initialData) {
                if (!this.apiKey) throw new Error('API Key required');
                
                const response = await fetch('https://api.jsonbin.io/v3/b', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Master-Key': this.apiKey,
                        'X-Bin-Name': 'annie-victoria-data',
                        'X-Bin-Private': 'false'
                    },
                    body: JSON.stringify(initialData)
                });

                if (!response.ok) throw new Error('Failed to create bin');
                
                const data = await response.json();
                return data.metadata.id;
            }

            async loadData() {
                if (this.isLocal) {
                    return this.loadLocalData();
                }

                if (!this.apiKey || !this.binId) {
                    throw new Error('Configuration required');
                }

                try {
                    const response = await fetch(`https://api.jsonbin.io/v3/b/${this.binId}/latest`, {
                        headers: {
                            'X-Master-Key': this.apiKey
                        }
                    });

                    if (!response.ok) throw new Error('Failed to load data');
                    
                    const data = await response.json();
                    return data.record;
                } catch (error) {
                    console.error('Error loading from JSONBin:', error);
                    // 回退到本地数据
                    return this.loadLocalData();
                }
            }

            async saveData(data) {
                if (this.isLocal) {
                    console.log('使用本地模式，保存到本地');
                    return this.saveLocalData(data);
                }

                if (!this.apiKey || !this.binId) {
                    throw new Error('Configuration required');
                }

                console.log('开始保存到JSONBin.io...');
                console.log('API Key:', this.apiKey ? this.apiKey.substring(0, 10) + '...' : '未设置');
                console.log('Bin ID:', this.binId || '未设置');
                console.log('数据大小:', JSON.stringify(data).length, '字符');

                try {
                    const url = `https://api.jsonbin.io/v3/b/${this.binId}`;
                    console.log('请求URL:', url);
                    
                    const response = await fetch(url, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Master-Key': this.apiKey
                        },
                        body: JSON.stringify(data)
                    });

                    console.log('响应状态:', response.status);
                    console.log('响应头:', Object.fromEntries(response.headers.entries()));

                    if (!response.ok) {
                        let errorMessage = `HTTP ${response.status}`;
                        if (response.status === 401) {
                            errorMessage = 'API Key 无效或权限不足';
                        } else if (response.status === 404) {
                            errorMessage = 'Bin ID 不存在';
                        } else if (response.status === 429) {
                            errorMessage = '请求过于频繁，请稍后再试';
                        }
                        throw new Error(errorMessage);
                    }
                    
                    const responseData = await response.json();
                    console.log('保存成功，响应:', responseData);
                    
                    // 同时保存到本地作为备份
                    this.saveLocalData(data);
                    
                    return true;
                } catch (error) {
                    console.error('保存到JSONBin.io失败:', error);
                    console.error('错误详情:', error.message);
                    
                    // 保存到本地作为备份
                    this.saveLocalData(data);
                    
                    // 重新抛出错误，让调用者知道保存失败
                    throw error;
                }
            }

            loadLocalData() {
                const data = localStorage.getItem('app_data');
                return data ? JSON.parse(data) : {
                    memories: [],
                    diaries: [],
                    todos: [],
                    messages: []
                };
            }

            saveLocalData(data) {
                localStorage.setItem('app_data', JSON.stringify(data));
                return true;
            }
        }

        // 初始化存储
        const storage = new JSONBinStorage();
        let appData = {
            memories: [],
            diaries: [],
            todos: [],
            messages: []
        };

        // 压缩图片
        function compressImage(file, maxWidth = 800, quality = 0.7) {
            return new Promise((resolve) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = new Image();
                    img.onload = () => {
                        const canvas = document.createElement('canvas');
                        let width = img.width;
                        let height = img.height;

                        if (width > maxWidth) {
                            height = (maxWidth / width) * height;
                            width = maxWidth;
                        }

                        canvas.width = width;
                        canvas.height = height;

                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, width, height);

                        canvas.toBlob((blob) => {
                            const reader = new FileReader();
                            reader.onloadend = () => resolve(reader.result);
                            reader.readAsDataURL(blob);
                        }, 'image/jpeg', quality);
                    };
                    img.src = e.target.result;
                };
                reader.readAsDataURL(file);
            });
        }

        // 显示提示消息
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toast.className = `toast show ${type}`;
            toastMessage.textContent = message;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // 保存配置
        async function saveConfig() {
            const apiKey = document.getElementById('apiKey').value.trim();
            let binId = document.getElementById('binId').value.trim();
            
            if (!apiKey) {
                showToast('请输入 API Key', 'error');
                return;
            }
            
            try {
                // 如果没有提供 Bin ID，创建新的
                if (!binId) {
                    showToast('正在创建存储空间...', 'success');
                    storage.apiKey = apiKey; // 临时设置用于创建
                    binId = await storage.createBin(appData);
                    showToast('存储空间创建成功！', 'success');
                }
                
                // 先测试连接
                showToast('正在测试连接...', 'success');
                const testResult = await testConnection(apiKey, binId);
                if (!testResult.success) {
                    showToast('连接测试失败：' + testResult.error, 'error');
                    return;
                }
                showToast('连接测试成功！', 'success');
                
                storage.saveConfig(apiKey, binId);
                document.getElementById('setupModal').classList.remove('active');
                
                // 强制重新加载数据
                await loadAllData();
                showToast('配置保存成功！', 'success');
                
                // 刷新页面以确保配置生效
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } catch (error) {
                showToast('配置失败：' + error.message, 'error');
            }
        }

        // 测试连接

        // 强制同步数据
        async function forceSync() {
            try {
                showToast('正在强制同步数据...', 'success');
                
                // 清除本地缓存
                localStorage.removeItem('app_data');
                
                // 重新加载数据
                await loadAllData();
                
                showToast('数据同步完成！', 'success');
                
                // 刷新页面显示
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } catch (error) {
                showToast('同步失败：' + error.message, 'error');
            }
        }

        // 手动同步到云端
        async function syncToCloud() {
            try {
                showToast('正在同步到云端...', 'success');
                
                console.log('=== 手动同步到云端开始 ===');
                
                if (storage.isLocal) {
                    showToast('当前使用本地模式，无法同步到云端', 'error');
                    console.log('当前使用本地模式');
                    return;
                }
                
                if (!storage.apiKey || !storage.binId) {
                    showToast('请先配置API Key和Bin ID', 'error');
                    console.log('配置不完整:', { apiKey: !!storage.apiKey, binId: !!storage.binId });
                    return;
                }
                
                console.log('配置检查通过');
                console.log('当前本地数据:', appData);
                
                // 获取当前所有数据
                const currentData = {
                    memories: appData.memories || [],
                    diaries: appData.diaries || [],
                    todos: appData.todos || [],
                    messages: appData.messages || []
                };
                
                console.log('准备上传的数据:', currentData);
                console.log('数据统计:', {
                    memories: currentData.memories.length,
                    diaries: currentData.diaries.length,
                    todos: currentData.todos.length,
                    messages: currentData.messages.length
                });
                
                // 保存到云端
                console.log('调用storage.saveData...');
                const result = await storage.saveData(currentData);
                
                console.log('保存结果:', result);
                
                if (result) {
                    console.log('数据成功同步到云端');
                    showToast('数据已成功同步到云端！', 'success');
                    
                    // 显示同步结果
                    const totalItems = currentData.memories.length + currentData.diaries.length + 
                                     currentData.todos.length + currentData.messages.length;
                    showToast(`同步完成！共上传 ${totalItems} 个数据项`, 'success');
                } else {
                    throw new Error('保存失败');
                }
                
            } catch (error) {
                console.error('同步到云端失败:', error);
                console.error('错误堆栈:', error.stack);
                showToast('同步失败：' + error.message, 'error');
            }
        }

        // 测试当前连接

        // 创建测试数据

        // 直接检查JSONBin.io库内容

        // 刷新同步数据

        // 使用本地模式
        function useLocalMode() {
            storage.setLocalMode();
            document.getElementById('setupModal').classList.remove('active');
            loadAllData();
            showToast('已切换到本地模式', 'success');
        }

        // 清除配置
        function clearConfig() {
            if (confirm('确定要清除所有配置吗？这将删除API Key和Bin ID。')) {
                localStorage.removeItem('jsonbin_config');
                localStorage.removeItem('app_data');
                storage.loadConfig();
                document.getElementById('setupModal').classList.remove('active');
                showToast('配置已清除，请重新配置', 'success');
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        }

        // 导出配置
        function exportConfig() {
            const config = localStorage.getItem('jsonbin_config');
            if (!config) {
                showToast('没有找到配置信息', 'error');
                return;
            }
            
            try {
                const configData = JSON.parse(config);
                const exportData = {
                    apiKey: configData.apiKey,
                    binId: configData.binId,
                    exportDate: new Date().toISOString(),
                    note: 'Victoria & Annie 网站配置信息'
                };
                
                const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'annie-victoria-config.json';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                showToast('配置已导出到文件', 'success');
            } catch (error) {
                showToast('导出失败：' + error.message, 'error');
            }
        }

        // 导入配置
        function importConfig() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const configData = JSON.parse(e.target.result);
                        
                        if (configData.apiKey && configData.binId) {
                            document.getElementById('apiKey').value = configData.apiKey;
                            document.getElementById('binId').value = configData.binId;
                            
                            showToast('配置导入成功！请点击保存配置', 'success');
                        } else {
                            showToast('配置文件格式不正确', 'error');
                        }
                    } catch (error) {
                        showToast('导入失败：' + error.message, 'error');
                    }
                };
                reader.readAsText(file);
            };
            input.click();
        }

        // 显示设置
        function showSettings() {
            const config = localStorage.getItem('jsonbin_config');
            if (config) {
                const parsed = JSON.parse(config);
                document.getElementById('apiKey').value = parsed.apiKey || '';
                document.getElementById('binId').value = parsed.binId || '';
            }
            document.getElementById('setupModal').classList.add('active');
        }

        // 兔子和书本的互动效果
        function initBunnyBookInteraction() {
            const bunny = document.getElementById('bunny');
            const book = document.querySelector('.book-image');
            
            if (!bunny || !book) return;
            
            // 当鼠标悬停在兔子上时，书本也会兴奋
            bunny.addEventListener('mouseenter', () => {
                book.style.animation = 'bookExcitedMagic 0.6s ease-in-out infinite';
                book.style.filter = 'drop-shadow(0 15px 30px rgba(139, 92, 246, 0.6)) drop-shadow(0 0 25px rgba(99, 102, 241, 0.4))';
            });
            
            bunny.addEventListener('mouseleave', () => {
                book.style.animation = 'bookMagicalFloat 4s ease-in-out infinite';
                book.style.filter = 'drop-shadow(0 4px 8px rgba(0,0,0,0.2))';
            });
            
            // 当鼠标悬停在书本上时，兔子也会兴奋
            book.addEventListener('mouseenter', () => {
                bunny.style.animation = 'bunnyExcitedDance 0.8s ease-in-out infinite';
                bunny.style.filter = 'drop-shadow(0 20px 40px rgba(139, 92, 246, 0.6)) drop-shadow(0 0 20px rgba(99, 102, 241, 0.5))';
            });
            
            book.addEventListener('mouseleave', () => {
                bunny.style.animation = 'bunnyMagicalFloat 6s ease-in-out infinite';
                bunny.style.filter = 'drop-shadow(0 8px 16px rgba(99, 102, 241, 0.3))';
            });
            
            // 点击兔子的特殊效果
            bunny.addEventListener('click', () => {
                // 兔子点击爆炸效果
                bunny.style.animation = 'bunnyMagicBurst 0.5s ease-out';
                
                // 书本也会跟着兴奋
                book.style.animation = 'bookExcitedMagic 0.6s ease-in-out infinite';
                
                // 显示兔子的对话框
                const speech = document.getElementById('bunny-speech');
                if (speech) {
                    speech.classList.remove('hidden');
                    setTimeout(() => {
                        speech.classList.add('hidden');
                    }, 3000);
                }
                
                // 重置动画
                setTimeout(() => {
                    bunny.style.animation = 'bunnyMagicalFloat 6s ease-in-out infinite';
                    book.style.animation = 'bookMagicalFloat 4s ease-in-out infinite';
                }, 500);
            });
            
            // 点击书本的特殊效果
            book.addEventListener('click', () => {
                // 书本点击旋转效果
                book.style.animation = 'bookExcitedMagic 0.6s ease-out infinite';
                
                // 兔子也会跟着兴奋
                bunny.style.animation = 'bunnyExcitedDance 0.8s ease-out infinite';
                
                // 显示提示
                showToast('📚 书本被点击了！兔子也很兴奋！', 'success');
                
                // 重置动画
                setTimeout(() => {
                    book.style.animation = 'bookMagicalFloat 4s ease-in-out infinite';
                    bunny.style.animation = 'bunnyMagicalFloat 6s ease-in-out infinite';
                }, 600);
            });
        }

        // 关闭设置
        function closeSettings() {
            document.getElementById('setupModal').classList.remove('active');
        }

        // 加载所有数据
        async function loadAllData() {
            try {
                appData = await storage.loadData();
                renderMemories();
                renderDiaries();
                renderTodos();
                renderMessages();
            } catch (error) {
                console.error('Error loading data:', error);
                showToast('加载数据失败', 'error');
            }
        }

        // 保存所有数据
        async function saveAllData() {
            try {
                await storage.saveData(appData);
                showToast('数据保存成功', 'success');
            } catch (error) {
                console.error('Error saving data:', error);
                showToast('保存失败，数据已保存到本地', 'error');
            }
        }

        // 渲染记忆墙
        function renderMemories() {
            const grid = document.getElementById('memoriesGrid');
            
            if (appData.memories.length === 0) {
                grid.innerHTML = `
                    <div class="col-span-full text-center py-12 bg-white rounded-xl shadow-sm">
                        <i class="fa fa-camera text-gray-300 text-5xl mb-4"></i>
                        <p class="text-gray-500">还没有照片呢，上传第一张回忆吧！</p>
                    </div>
                `;
                return;
            }
            
            grid.innerHTML = appData.memories.map(memory => `
                <div class="bg-white rounded-2xl shadow-md overflow-hidden card-hover group relative">
                    <button onclick="deleteMemory('${memory.id}')" class="absolute top-2 right-2 z-10 bg-white/80 hover:bg-white text-gray-500 hover:text-red-500 p-1 rounded-full shadow-md transition-colors">
                        <i class="fa fa-trash-o"></i>
                    </button>
                    <div class="relative overflow-hidden">
                        <img src="${memory.photo}" alt="${memory.title}" class="w-full h-64 object-cover transition-transform duration-500 group-hover:scale-110">
                        <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
                            <p class="text-white font-medium">${memory.title}</p>
                            <p class="text-white/80 text-sm">${memory.date} · 由 ${memory.uploader} 上传</p>
                        </div>
                    </div>
                    <div class="p-4">
                        <p class="text-gray-600">${memory.desc || ''}</p>
                        <div class="mt-3 text-xs text-gray-400">${new Date(memory.timestamp).toLocaleString()}</div>
                    </div>
                </div>
            `).join('');
        }

        // 渲染日记
        function renderDiaries() {
            const list = document.getElementById('diariesList');
            
            if (appData.diaries.length === 0) {
                list.innerHTML = `
                    <div class="text-center py-12 bg-white rounded-xl shadow-sm">
                        <i class="fa fa-book text-gray-300 text-5xl mb-4"></i>
                        <p class="text-gray-500">日记本还是空的，写下第一篇日记吧！</p>
                    </div>
                `;
                return;
            }
            
            list.innerHTML = appData.diaries.map(diary => `
                <div class="bg-white rounded-xl shadow-md p-6 card-hover">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="text-xl font-bold ${diary.author === 'Victoria' ? 'text-victoria' : 'text-annie'}">${diary.title}</h3>
                            <p class="text-gray-500 text-sm">${new Date(diary.timestamp).toLocaleString()} · 由 ${diary.author} 发布</p>
                        </div>
                        <span class="bg-blue-50 text-primary text-xs px-3 py-1 rounded-full">${diary.category}</span>
                    </div>
                    <p class="text-gray-600 mb-4">${diary.content}</p>
                    <button onclick="deleteDiary('${diary.id}')" class="text-gray-400 hover:text-red-500 text-sm">
                        <i class="fa fa-trash-o mr-1"></i> 删除
                    </button>
                </div>
            `).join('');
        }

        // 渲染待办事项
        let currentTodoFilter = 'all';
        
        function renderTodos() {
            const list = document.getElementById('todosList');
            let todos = [...appData.todos];
            
            if (currentTodoFilter === 'active') {
                todos = todos.filter(todo => !todo.completed);
            } else if (currentTodoFilter === 'completed') {
                todos = todos.filter(todo => todo.completed);
            }
            
            if (todos.length === 0) {
                list.innerHTML = `
                    <div class="text-center py-12">
                        <i class="fa fa-list text-gray-300 text-5xl mb-4"></i>
                        <p class="text-gray-500">还没有计划呢，添加一个一起完成的事情吧！</p>
                    </div>
                `;
                return;
            }
            
            list.innerHTML = todos.map(todo => `
                <div class="flex items-center p-3 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors duration-200 ${todo.completed ? 'bg-gray-50' : ''}">
                    <input type="checkbox" ${todo.completed ? 'checked' : ''} onchange="toggleTodo('${todo.id}')" class="w-5 h-5 text-primary rounded focus:ring-primary mr-3">
                    <div class="flex-grow">
                        <span class="${todo.completed ? 'line-through text-gray-500' : ''}">${todo.task}</span>
                        <div class="flex items-center mt-1 text-sm">
                            <span class="text-gray-500 mr-3"><i class="fa fa-calendar-o mr-1"></i> ${todo.deadline}</span>
                            <span class="text-gray-400"><i class="fa fa-user-o mr-1"></i> ${todo.creator}</span>
                        </div>
                        ${todo.notes ? `<p class="text-xs text-gray-500 mt-1">${todo.notes}</p>` : ''}
                    </div>
                    <button onclick="deleteTodo('${todo.id}')" class="text-gray-400 hover:text-red-500 ml-2">
                        <i class="fa fa-trash-o"></i>
                    </button>
                </div>
            `).join('');
        }

        // 渲染消息
        function renderMessages() {
            const container = document.getElementById('messagesContainer');
            
            if (appData.messages.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-16">
                        <i class="fa fa-envelope text-gray-300 text-5xl mb-4"></i>
                        <p class="text-gray-500">还没有悄悄话呢，给对方发一条吧！</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = appData.messages.map(message => `
                <div class="flex items-start ${message.sender === 'Victoria' ? 'justify-end' : ''}">
                    ${message.sender === 'Annie' ? `
                        <div class="w-10 h-10 rounded-full bg-annie/20 flex items-center justify-center mr-3 flex-shrink-0">
                            <span class="font-bold text-annie">A</span>
                        </div>
                    ` : ''}
                    <div class="max-w-[70%]">
                        <div class="${message.sender === 'Victoria' ? 'bg-victoria/10 rounded-2xl rounded-tr-none' : 'bg-annie/10 rounded-2xl rounded-tl-none'} p-4">
                            <p>${message.message}</p>
                        </div>
                        <p class="text-gray-400 text-xs mt-1 ${message.sender === 'Victoria' ? 'text-right' : 'ml-2'}">
                            ${message.sender} · ${new Date(message.timestamp).toLocaleString()}
                        </p>
                    </div>
                    ${message.sender === 'Victoria' ? `
                        <div class="w-10 h-10 rounded-full bg-victoria/20 flex items-center justify-center ml-3 flex-shrink-0">
                            <span class="font-bold text-victoria">V</span>
                        </div>
                    ` : ''}
                </div>
            `).join('');
            
            // 滚动到底部
            container.scrollTop = container.scrollHeight;
        }

        // 删除功能
        async function deleteMemory(id) {
            if (confirm('确定要删除这张照片吗？')) {
                appData.memories = appData.memories.filter(m => m.id !== id);
                await saveAllData();
                renderMemories();
            }
        }

        async function deleteDiary(id) {
            if (confirm('确定要删除这篇日记吗？')) {
                appData.diaries = appData.diaries.filter(d => d.id !== id);
                await saveAllData();
                renderDiaries();
            }
        }

        async function deleteTodo(id) {
            if (confirm('确定要删除这个待办事项吗？')) {
                appData.todos = appData.todos.filter(t => t.id !== id);
                await saveAllData();
                renderTodos();
            }
        }

        // 切换待办状态
        async function toggleTodo(id) {
            const todo = appData.todos.find(t => t.id === id);
            if (todo) {
                todo.completed = !todo.completed;
                await saveAllData();
                renderTodos();
            }
        }

        // 待办筛选
        document.getElementById('showAllTodos').addEventListener('click', function() {
            currentTodoFilter = 'all';
            setActiveFilter(this);
            renderTodos();
        });

        document.getElementById('showActiveTodos').addEventListener('click', function() {
            currentTodoFilter = 'active';
            setActiveFilter(this);
            renderTodos();
        });

        document.getElementById('showCompletedTodos').addEventListener('click', function() {
            currentTodoFilter = 'completed';
            setActiveFilter(this);
            renderTodos();
        });

        function setActiveFilter(button) {
            document.querySelectorAll('#showAllTodos, #showActiveTodos, #showCompletedTodos').forEach(btn => {
                btn.classList.remove('bg-blue-100', 'text-primary');
                btn.classList.add('bg-gray-100', 'text-gray-600');
            });
            button.classList.remove('bg-gray-100', 'text-gray-600');
            button.classList.add('bg-blue-100', 'text-primary');
        }

        // 表单提交处理
        document.getElementById('memoryForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('photoFile');
            const file = fileInput.files[0];
            
            if (file) {
                showToast('正在处理图片...', 'success');
                const compressedImage = await compressImage(file);
                
                const memory = {
                    id: Date.now().toString(),
                    title: document.getElementById('photoTitle').value,
                    date: document.getElementById('photoDate').value,
                    desc: document.getElementById('photoDescription').value,
                    photo: compressedImage,
                    uploader: document.getElementById('photoUploader').value,
                    timestamp: new Date().toISOString()
                };
                
                appData.memories.unshift(memory);
                await saveAllData();
                renderMemories();
                this.reset();
            }
        });

        document.getElementById('diaryForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const diary = {
                id: Date.now().toString(),
                title: document.getElementById('diaryTitle').value,
                author: document.getElementById('diaryAuthor').value,
                category: document.getElementById('diaryCategory').value,
                content: document.getElementById('diaryContent').value,
                timestamp: new Date().toISOString()
            };
            
            appData.diaries.unshift(diary);
            await saveAllData();
            renderDiaries();
            this.reset();
        });

        document.getElementById('todoForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const todo = {
                id: Date.now().toString(),
                task: document.getElementById('todoItem').value,
                creator: document.getElementById('todoCreator').value,
                deadline: document.getElementById('todoDate').value,
                notes: document.getElementById('todoNotes').value,
                completed: false,
                timestamp: new Date().toISOString()
            };
            
            appData.todos.unshift(todo);
            await saveAllData();
            renderTodos();
            this.reset();
        });

        document.getElementById('messageForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const message = {
                id: Date.now().toString(),
                sender: document.getElementById('messageSender').value,
                message: document.getElementById('messageInput').value,
                timestamp: new Date().toISOString()
            };
            
            appData.messages.push(message);
            await saveAllData();
            renderMessages();
            document.getElementById('messageInput').value = '';
        });

        // 计算相识天数
        function calculateDays() {
            const startDate = new Date('2021-04-01');
            const now = new Date();
            const diffTime = Math.abs(now - startDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            document.getElementById('days-count').textContent = diffDays;
            if (document.getElementById('days-count-mobile')) {
                document.getElementById('days-count-mobile').textContent = diffDays;
            }
        }

        // 兔子对话功能
        const bunny = document.getElementById('bunny');
        const bunnySpeech = document.getElementById('bunny-speech');
        const bunnyText = document.getElementById('bunny-text');
        
        const bunnyPhrases = [
            "你们好呀！😊",
            "今天也是开心的一天呢！",
            "好羡慕你们的友谊呀～",
            "要一直这么好哦！",
            "记得多拍照记录美好瞬间呀！",
            "今天有没有什么开心的事呀？",
            "加油完成待办清单吧！",
            "悄悄话时间到～"
        ];
        
        bunny.addEventListener('mouseenter', () => {
            const randomPhrase = bunnyPhrases[Math.floor(Math.random() * bunnyPhrases.length)];
            bunnyText.textContent = randomPhrase;
            bunnySpeech.classList.remove('hidden');
        });
        
        bunny.addEventListener('mouseleave', () => {
            bunnySpeech.classList.add('hidden');
        });

        // 移动端菜单
        const menuBtn = document.getElementById('menuBtn');
        const mobileMenu = document.getElementById('mobileMenu');
        
        menuBtn.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
            if (mobileMenu.classList.contains('hidden')) {
                menuBtn.innerHTML = '<i class="fa fa-bars text-xl"></i>';
            } else {
                menuBtn.innerHTML = '<i class="fa fa-times text-xl"></i>';
            }
        });

        // 平滑滚动
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                
                if (!mobileMenu.classList.contains('hidden')) {
                    mobileMenu.classList.add('hidden');
                    menuBtn.innerHTML = '<i class="fa fa-bars text-xl"></i>';
                }
                
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    window.scrollTo({
                        top: targetElement.offsetTop - 80,
                        behavior: 'smooth'
                    });
                }
            });
        });

        // 初始化
        calculateDays();
        
        // 初始化兔子和书本的互动效果
        initBunnyBookInteraction();
        
        // 检查是否需要显示设置
        const config = localStorage.getItem('jsonbin_config');
        if (!config) {
            document.getElementById('setupModal').classList.add('active');
        } else {
            // 强制从远程加载数据，解决手机刷新后数据丢失问题
            console.log('开始初始化数据...');
            
            // 检查是否使用JSONBin.io
            if (storage && !storage.isLocal && storage.apiKey && storage.binId) {
                console.log('检测到JSONBin.io配置，强制从远程加载数据...');
                
                // 延迟一点加载，确保storage实例已初始化
                setTimeout(async () => {
                    try {
                        // 强制从远程加载数据
                        const remoteData = await storage.loadData();
                        console.log('远程数据加载成功:', remoteData);
                        
                        // 更新本地数据
                        appData = remoteData;
                        
                        // 保存到本地作为备份
                        storage.saveLocalData(remoteData);
                        
                        // 渲染数据
                        renderAllData();
                        
                        console.log('远程数据同步完成');
                    } catch (error) {
                        console.error('远程数据加载失败，回退到本地数据:', error);
                        loadAllData();
                    }
                }, 100);
            } else {
                console.log('使用本地模式或配置不完整，加载本地数据...');
                loadAllData();
            }
        }
    </script>
</body>
</html>